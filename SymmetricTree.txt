/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
       if(root==NULL)    // Tree is empty
            return true;
       return myFunc(root->left, root->right); // send the left and right child of root
    }
    
    bool myFunc(TreeNode *p, TreeNode *q){
        if(p==NULL && q==NULL)   // left and right node is NULL
            return true;
        else if(p==NULL || q==NULL)  // one of them is not null
            return false; 
        else if(p->val != q->val)
            return false;
        return myFunc(p->left, q->right) && myFunc(p->right, q->left);
        // comparing left subtree's left child with right subtree's right child
        // and left subtree's right child with right subtree's left child 
    }
};