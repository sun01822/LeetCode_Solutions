/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;  // vector to store the ans
        queue<TreeNode*> q;  // queue to track the node and traverse the tree
        if(root==NULL) // check that tree is empty or not
            return ans;  // return the ans vector
        else{
            q.push(root);  // push the root to the queue
            while(!q.empty()){
                int size = q.size();  // calcualte the size of queue
                vector<int>v;
                for(int i=0; i<size; i++){
                    TreeNode * node = q.front();    // take the queue front to traverse left of right
                    q.pop();
                    if(node->left) q.push(node->left);  // check that the node has left child or not
                    if(node->right) q.push(node->right); // check that the node has right child or not
                    v.push_back(node->val);  // then push the value to the vector
                }
                ans.push_back(v);  // then push the vector to the  ans vector
            }
            return ans;  // return the ans vector
        }
    }
};